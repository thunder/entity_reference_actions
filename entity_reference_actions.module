<?php

/**
 * @file
 * Entity reference actions module hooks.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseDialogCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\entity_reference_actions\EntityReferenceActionsHandler;

/**
 * Implements hook_field_widget_form_alter().
 */
function entity_reference_actions_field_widget_form_container_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();

  if ($field_definition->getType() === 'entity_reference') {
    $handler = \Drupal::classResolver(EntityReferenceActionsHandler::class);
    $entity_type = $field_definition->getSettings()['target_type'];

    /** @var \Drupal\Core\Field\WidgetInterface $widget */
    $widget = $context['widget'];

    $handler->init($entity_type, $widget->getThirdPartySettings('entity_reference_actions'));
    $handler->formAlter($element, $form_state, $context);
  }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function entity_reference_actions_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  $element = [];
  if ($field_definition->getType() === 'entity_reference') {
    $handler = \Drupal::classResolver(EntityReferenceActionsHandler::class);
    $entity_type = $field_definition->getSettings()['target_type'];

    $handler->init($entity_type, $plugin->getThirdPartySettings('entity_reference_actions'));
    $handler->buildSettingsForm($element, $form_state, $field_definition->getName());
  }
  return $element;
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function entity_reference_actions_field_widget_settings_summary_alter(&$summary, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['field_definition'];

  if ($field_definition->getType() === 'entity_reference') {
    $enabled = $context['widget']->getThirdPartySetting('entity_reference_actions', 'enabled');
    $summary[] = 'Entity Reference Actions: ' . ($enabled ? 'On' : 'Off');
  }
}

/**
 * Implements hook_form_alter().
 */
function entity_reference_actions_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id !== 'bulk_edit_form' && $form_state->getBuildInfo()['base_form_id'] !== 'entity_delete_multiple_confirm_form') {
    return;
  }

  $is_ajax = FALSE;
  foreach (['drupal_ajax', 'drupal_modal', 'drupal_dialog'] as $wrapper) {
    if (strpos(\Drupal::request()->get(MainContentViewSubscriber::WRAPPER_FORMAT), $wrapper) !== FALSE) {
      $is_ajax = TRUE;
    }
  }
  if (!$is_ajax) {
    return;
  }

  if (isset($form['actions']['submit'])) {
    $form['actions']['submit']['#ajax']['callback'] = 'entity_reference_actions_dialog_ajax_submit';
  }
  if (isset($form['actions']['cancel'])) {
    $form['actions']['cancel']['#attributes']['class'][] = 'dialog-cancel';
  }
}

/**
 * Submit form dialog #ajax callback.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   An AJAX response that display validation error messages or represents a
 *   successful submission.
 */
function entity_reference_actions_dialog_ajax_submit(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  if ($form_state->hasAnyErrors()) {
    $form['status_messages'] = [
      '#type' => 'status_messages',
      '#weight' => -1000,
    ];
    $form['#sorted'] = FALSE;
    $response->addCommand(new ReplaceCommand('[data-drupal-selector="' . $form['#attributes']['data-drupal-selector'] . '"]', $form));
  }
  else {
    $response->addCommand(new CloseDialogCommand());
  }
  return $response;
}
